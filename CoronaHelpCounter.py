from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5 import QtWebEngineWidgets
import requests
import json
import time
import os
import sys
from sys import exit
try:
    os.mkdir("temp")
except:
    pass
class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        MainWindow.resize(800, 640)
        MainWindow.setWindowIcon(QtGui.QIcon("Logo.png"))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.Submit = QtWidgets.QPushButton(self.centralwidget)
        self.Submit.setGeometry(QtCore.QRect(50, 270, 75, 23))
        self.Submit.setAutoFillBackground(False)
        self.Submit.setObjectName("Submit")
        self.label1 = QtWidgets.QLabel(self.centralwidget)
        self.label1.setGeometry(QtCore.QRect(50, 40, 341, 71))
        font = QtGui.QFont()
        font.setFamily("Quicksand")
        font.setPointSize(26)
        font.setBold(True)
        font.setUnderline(True)
        font.setWeight(75)
        font.setKerning(True)
        self.label1.setFont(font)
        self.label1.setObjectName("label1")
        self.State = QtWidgets.QLineEdit(self.centralwidget)
        self.State.setGeometry(QtCore.QRect(50, 190, 231, 20))
        self.State.setObjectName("State")
        self.Dist = QtWidgets.QLineEdit(self.centralwidget)
        self.Dist.setGeometry(QtCore.QRect(50, 230, 231, 20))
        self.Dist.setObjectName("Dist")
        self.Manually = QtWidgets.QCheckBox(self.centralwidget)
        self.Manually.setGeometry(QtCore.QRect(50, 160, 71, 21))
        self.Manually.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.Manually.setObjectName("Manually")
        self.Automatically = QtWidgets.QCheckBox(self.centralwidget)
        self.Automatically.setGeometry(QtCore.QRect(130, 160, 91, 21))
        self.Automatically.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.Automatically.setObjectName("Automatically")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(60, 120, 151, 31))
        font = QtGui.QFont()
        font.setFamily("Quicksand")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.StateLab = QtWidgets.QLabel(self.centralwidget)
        self.StateLab.setGeometry(QtCore.QRect(500, 60, 151, 31))
        font = QtGui.QFont()
        font.setFamily("Quicksand")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.StateLab.setFont(font)
        self.StateLab.setObjectName("StateLab")
        self.state_confirmed = QtWidgets.QLabel(self.centralwidget)
        self.state_confirmed.setGeometry(QtCore.QRect(500, 110, 100, 30))
        font = QtGui.QFont()
        font.setFamily("Quicksand")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.state_confirmed.setFont(font)
        self.state_confirmed.setObjectName("state_confirmed")
        self.state_active = QtWidgets.QLabel(self.centralwidget)
        self.state_active.setGeometry(QtCore.QRect(500, 155, 100, 30))
        font = QtGui.QFont()
        font.setFamily("Quicksand")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.state_active.setFont(font)
        self.state_active.setObjectName("state_active")
        self.state_recovered = QtWidgets.QLabel(self.centralwidget)
        self.state_recovered.setGeometry(QtCore.QRect(500, 200, 100, 30))
        font = QtGui.QFont()
        font.setFamily("Quicksand")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.state_recovered.setFont(font)
        self.state_recovered.setObjectName("state_recovered")
        self.SRecoveredLCD = QtWidgets.QLCDNumber(self.centralwidget)
        self.SRecoveredLCD.setGeometry(QtCore.QRect(613, 200, 80, 30))
        self.SRecoveredLCD.setStyleSheet("QLCDNumber{color:rgb(0, 0, 0);background-color:rgb(255,255, 255);}")
        self.SRecoveredLCD.setFrameShadow(QtWidgets.QFrame.Raised)
        self.SRecoveredLCD.setDigitCount(6)
        self.SRecoveredLCD.setSegmentStyle(QtWidgets.QLCDNumber.Flat)
        self.SRecoveredLCD.setProperty("intValue", 0)
        self.SRecoveredLCD.setObjectName("SRecoveredLCD")
        self.state_deaths = QtWidgets.QLabel(self.centralwidget)
        self.state_deaths.setGeometry(QtCore.QRect(500, 245, 100, 30))
        font = QtGui.QFont()
        font.setFamily("Quicksand")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.state_deaths.setFont(font)
        self.state_deaths.setObjectName("state_deaths")
        self.dist_zone = QtWidgets.QLabel(self.centralwidget)
        self.dist_zone.setGeometry(QtCore.QRect(500, 495, 100, 30))
        font = QtGui.QFont()
        font.setFamily("Quicksand")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.dist_zone.setFont(font)
        self.dist_zone.setObjectName("dist_zone")
        self.dist_deaths = QtWidgets.QLabel(self.centralwidget)
        self.dist_deaths.setGeometry(QtCore.QRect(500, 450, 100, 30))
        font = QtGui.QFont()
        font.setFamily("Quicksand")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.dist_deaths.setFont(font)
        self.dist_deaths.setObjectName("dist_deaths")
        self.dist_confirmed = QtWidgets.QLabel(self.centralwidget)
        self.dist_confirmed.setGeometry(QtCore.QRect(500, 360, 100, 30))
        font = QtGui.QFont()
        font.setFamily("Quicksand")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.dist_confirmed.setFont(font)
        self.dist_confirmed.setObjectName("dist_confirmed")
        self.DistLab = QtWidgets.QLabel(self.centralwidget)
        self.DistLab.setGeometry(QtCore.QRect(500, 300, 151, 31))
        font = QtGui.QFont()
        font.setFamily("Quicksand")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.DistLab.setFont(font)
        self.DistLab.setObjectName("DistLab")
        self.dist_recovered = QtWidgets.QLabel(self.centralwidget)
        self.dist_recovered.setGeometry(QtCore.QRect(500, 405, 100, 30))
        font = QtGui.QFont()
        font.setFamily("Quicksand")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.dist_recovered.setFont(font)
        self.dist_recovered.setObjectName("dist_recovered")
        self.ZoneColor = QtWidgets.QLabel(self.centralwidget)
        self.ZoneColor.setEnabled(True)
        self.ZoneColor.setGeometry(QtCore.QRect(0, 0, 800, 600))
        self.ZoneColor.setText("")
        self.ZoneColor.setPixmap(QtGui.QPixmap("Blue.png"))
        self.ZoneColor.setObjectName("ZoneColor")
        self.dist_active_2 = QtWidgets.QLabel(self.centralwidget)
        self.dist_active_2.setGeometry(QtCore.QRect(613, 495, 100, 30))
        font = QtGui.QFont()
        font.setFamily("Quicksand")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.dist_active_2.setFont(font)
        self.dist_active_2.setObjectName("dist_active_2")
        self.GovtHosp = QtWidgets.QPushButton(self.centralwidget)
        self.GovtHosp.setGeometry(QtCore.QRect(310, 160, 81, 31))
        self.GovtHosp.setObjectName("GovtHosp")
        self.LocShow = QtWidgets.QLabel(self.centralwidget)
        self.LocShow.setGeometry(QtCore.QRect(290, 130, 141, 20))
        font = QtGui.QFont()
        font.setFamily("Quicksand")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.LocShow.setFont(font)
        self.LocShow.setObjectName("LocShow")
        self.FoodShel = QtWidgets.QPushButton(self.centralwidget)
        self.FoodShel.setGeometry(QtCore.QRect(310, 200, 81, 31))
        self.FoodShel.setObjectName("FoodShel")
        self.NightShel = QtWidgets.QPushButton(self.centralwidget)
        self.NightShel.setGeometry(QtCore.QRect(310, 240, 81, 31))
        self.NightShel.setObjectName("NightShel")
        self.Browser = QtWebEngineWidgets.QWebEngineView(self.centralwidget)
        self.Browser.setGeometry(QtCore.QRect(50, 300, 441, 261))
        self.Browser.setObjectName("Browser")
        self.Browser.setUrl(QtCore.QUrl("https://google.com/maps"))
        self.Browser.show()
        self.line = QtWidgets.QFrame(self.Browser)
        self.line.setGeometry(QtCore.QRect(-17, 220, 20, 21))
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.line_2 = QtWidgets.QFrame(self.centralwidget)
        self.line_2.setGeometry(QtCore.QRect(50, 290, 441, 16))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.line_2.setFont(font)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_2.setLineWidth(2)
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setObjectName("line_2")
        self.line_3 = QtWidgets.QFrame(self.centralwidget)
        self.line_3.setGeometry(QtCore.QRect(50, 551, 441, 20))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.line_3.setFont(font)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_3.setLineWidth(2)
        self.line_3.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_3.setObjectName("line_3")
        self.line_4 = QtWidgets.QFrame(self.centralwidget)
        self.line_4.setGeometry(QtCore.QRect(470, 300, 41, 261))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.line_4.setFont(font)
        self.line_4.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_4.setLineWidth(2)
        self.line_4.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_4.setObjectName("line_4")
        self.line_5 = QtWidgets.QFrame(self.centralwidget)
        self.line_5.setGeometry(QtCore.QRect(30, 300, 41, 261))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.line_5.setFont(font)
        self.line_5.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_5.setLineWidth(2)
        self.line_5.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_5.setObjectName("line_5")
        self.Map = QtWidgets.QLabel(self.centralwidget)
        self.Map.setGeometry(QtCore.QRect(210, 270, 61, 20))
        font = QtGui.QFont()
        font.setFamily("Quicksand")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.Map.setFont(font)
        self.Map.setObjectName("Map")
        self.SConfirmedLCD = QtWidgets.QLCDNumber(self.centralwidget)
        self.SConfirmedLCD.setGeometry(QtCore.QRect(613, 110, 80, 30))
        self.SConfirmedLCD.setStyleSheet("QLCDNumber{color:rgb(0, 0, 0);background-color:rgb(255,255, 255);}")
        self.SConfirmedLCD.setFrameShadow(QtWidgets.QFrame.Raised)
        self.SConfirmedLCD.setDigitCount(6)
        self.SConfirmedLCD.setSegmentStyle(QtWidgets.QLCDNumber.Flat)
        self.SConfirmedLCD.setProperty("intValue", 0)
        self.SConfirmedLCD.setObjectName("SConfirmedLCD")
        self.SActiveLCD = QtWidgets.QLCDNumber(self.centralwidget)
        self.SActiveLCD.setGeometry(QtCore.QRect(613, 155, 80, 30))
        self.SActiveLCD.setStyleSheet("QLCDNumber{color:rgb(0, 0, 0);background-color:rgb(255,255, 255);}")
        self.SActiveLCD.setFrameShadow(QtWidgets.QFrame.Raised)
        self.SActiveLCD.setDigitCount(6)
        self.SActiveLCD.setSegmentStyle(QtWidgets.QLCDNumber.Flat)
        self.SActiveLCD.setProperty("intValue", 0)
        self.SActiveLCD.setObjectName("SActiveLCD")
        self.SDeathsLCD = QtWidgets.QLCDNumber(self.centralwidget)
        self.SDeathsLCD.setGeometry(QtCore.QRect(613, 245, 80, 30))
        self.SDeathsLCD.setStyleSheet("QLCDNumber{color:rgb(0, 0, 0);background-color:rgb(255,255, 255);}")
        self.SDeathsLCD.setFrameShadow(QtWidgets.QFrame.Raised)
        self.SDeathsLCD.setDigitCount(6)
        self.SDeathsLCD.setSegmentStyle(QtWidgets.QLCDNumber.Flat)
        self.SDeathsLCD.setProperty("intValue", 0)
        self.SDeathsLCD.setObjectName("SDeathsLCD")
        self.DConfirmedLCD = QtWidgets.QLCDNumber(self.centralwidget)
        self.DConfirmedLCD.setGeometry(QtCore.QRect(613, 360, 80, 30))
        self.DConfirmedLCD.setStyleSheet("QLCDNumber{color:rgb(0, 0, 0);background-color:rgb(255,255, 255);}")
        self.DConfirmedLCD.setFrameShadow(QtWidgets.QFrame.Raised)
        self.DConfirmedLCD.setDigitCount(6)
        self.DConfirmedLCD.setSegmentStyle(QtWidgets.QLCDNumber.Flat)
        self.DConfirmedLCD.setProperty("intValue", 0)
        self.DConfirmedLCD.setObjectName("DConfirmedLCD")
        self.DRecoveredLCD = QtWidgets.QLCDNumber(self.centralwidget)
        self.DRecoveredLCD.setGeometry(QtCore.QRect(613, 405, 80, 30))
        self.DRecoveredLCD.setStyleSheet("QLCDNumber{color:rgb(0, 0, 0);background-color:rgb(255,255, 255);}")
        self.DRecoveredLCD.setFrameShadow(QtWidgets.QFrame.Raised)
        self.DRecoveredLCD.setDigitCount(6)
        self.DRecoveredLCD.setSegmentStyle(QtWidgets.QLCDNumber.Flat)
        self.DRecoveredLCD.setProperty("intValue", 0)
        self.DRecoveredLCD.setObjectName("DRecoveredLCD")
        self.DDeathsLCD = QtWidgets.QLCDNumber(self.centralwidget)
        self.DDeathsLCD.setGeometry(QtCore.QRect(613, 450, 80, 30))
        self.DDeathsLCD.setStyleSheet("QLCDNumber{color:rgb(0, 0, 0);background-color:rgb(255,255, 255);}")
        self.DDeathsLCD.setFrameShadow(QtWidgets.QFrame.Raised)
        self.DDeathsLCD.setDigitCount(6)
        self.DDeathsLCD.setSegmentStyle(QtWidgets.QLCDNumber.Flat)
        self.DDeathsLCD.setProperty("intValue", 0)
        self.DDeathsLCD.setObjectName("DDeathsLCD")
        self.ZoneColor.raise_()
        self.Submit.raise_()
        self.label1.raise_()
        self.State.raise_()
        self.Dist.raise_()
        self.Manually.raise_()
        self.Automatically.raise_()
        self.label.raise_()
        self.StateLab.raise_()
        self.state_confirmed.raise_()
        self.state_active.raise_()
        self.state_recovered.raise_()
        self.SRecoveredLCD.raise_()
        self.state_deaths.raise_()
        self.dist_zone.raise_()
        self.dist_deaths.raise_()
        self.dist_confirmed.raise_()
        self.DistLab.raise_()
        self.dist_recovered.raise_()
        self.dist_active_2.raise_()
        self.GovtHosp.raise_()
        self.LocShow.raise_()
        self.FoodShel.raise_()
        self.NightShel.raise_()
        self.Browser.raise_()
        self.line_2.raise_()
        self.line_3.raise_()
        self.line_4.raise_()
        self.line_5.raise_()
        self.Map.raise_()
        self.SConfirmedLCD.raise_()
        self.SActiveLCD.raise_()
        self.SDeathsLCD.raise_()
        self.DConfirmedLCD.raise_()
        self.DRecoveredLCD.raise_()
        self.DDeathsLCD.raise_()
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionExit = QtWidgets.QAction(MainWindow)
        self.actionExit.setObjectName("actionExit")
        self.actionAbout = QtWidgets.QAction(MainWindow)
        self.actionAbout.setObjectName("actionAbout")
        self.actionDeveloper = QtWidgets.QAction(MainWindow)
        self.actionDeveloper.setObjectName("actionDeveloper")
        self.menuHelp.addAction(self.actionExit)
        self.menuHelp.addAction(self.actionAbout)
        self.menuHelp.addAction(self.actionDeveloper)
        self.menubar.addAction(self.menuHelp.menuAction())
        self.actionExit.triggered.connect(exit)
        self.actionDeveloper.triggered.connect(lambda:self.Browser.setUrl(QtCore.QUrl("http://arduino3128.github.io")))
        self.actionAbout.triggered.connect(lambda:self.Browser.setUrl(QtCore.QUrl("http://arduino3128.github.io")))
        self.Manually.toggled.connect(lambda:self.checktoggle(self.Manually))
        self.Automatically.toggled.connect(lambda:self.checktoggle(self.Automatically))
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        print("Debug Terminal:")
    def checktoggle(self,But):
        if But.text()=="Manually":
            if self.Manually.isChecked()==True:
                print("Manual")
                self.Submit.clicked.connect(lambda:self.SubData())
        elif But.text()=="Automatically":
            if self.Automatically.isChecked()==True:
                print("Auto")
                self.StateLab.setText("State: Detecting")
                self.StateLab.adjustSize()
                self.DistLab.setText("Dist: Detecting")
                self.DistLab.adjustSize()
                self.process()
            
    

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "CoronaHelpCounter"))
        self.Submit.setText(_translate("MainWindow", "Submit"))
        self.label1.setText(_translate("MainWindow", "CoronaHelpCounter"))
        self.State.setPlaceholderText(_translate("MainWindow", "Enter State"))
        self.Dist.setPlaceholderText(_translate("MainWindow", "Enter District"))
        self.Manually.setText(_translate("MainWindow", "Manually"))
        self.Automatically.setText(_translate("MainWindow", "Automatically"))
        self.label.setText(_translate("MainWindow", "Select Location: "))
        self.StateLab.setText(_translate("MainWindow", "State: "))
        self.state_confirmed.setText(_translate("MainWindow", "Confirmed:"))
        self.state_active.setText(_translate("MainWindow", "Active:"))
        self.state_recovered.setText(_translate("MainWindow", "Recovered:"))
        self.state_deaths.setText(_translate("MainWindow", "Deaths:"))
        self.dist_zone.setText(_translate("MainWindow", "Zone Type:"))
        self.dist_deaths.setText(_translate("MainWindow", "Deaths:"))
        self.dist_confirmed.setText(_translate("MainWindow", "Confirmed:"))
        self.DistLab.setText(_translate("MainWindow", "District:"))
        self.dist_recovered.setText(_translate("MainWindow", "Recovered:"))
        self.dist_active_2.setText(_translate("MainWindow", "N/A"))
        self.GovtHosp.setText(_translate("MainWindow", "Govt. Hospitals"))
        self.LocShow.setText(_translate("MainWindow", "Locate nearby:"))
        self.FoodShel.setText(_translate("MainWindow", "Food Shelters"))
        self.NightShel.setText(_translate("MainWindow", "Night Shelters"))
        self.Map.setText(_translate("MainWindow", "Map:"))
        self.menuHelp.setTitle(_translate("MainWindow", "Help"))
        self.actionExit.setText(_translate("MainWindow", "Exit"))
        self.actionExit.setShortcut(_translate("MainWindow", "Ctrl+E"))
        self.actionAbout.setText(_translate("MainWindow", "About"))
        self.actionDeveloper.setText(_translate("MainWindow", "Developer"))
    def FMlocation(self,dist):
        self.Browser.setUrl(QtCore.QUrl("http://google.com/maps/search/Food+Shelter+in+%s"%dist))
    def NMlocation(self,dist):
        self.Browser.setUrl(QtCore.QUrl("http://google.com/maps/search/Night+Shelter+in+%s"%dist))
    def GHMlocation(self,dist):
            self.Browser.setUrl(QtCore.QUrl("http://google.com/maps/search/Goverment+Hospitals+in+%s"%dist))
    def SubData(self):
        state=self.State.text()
        dist=self.Dist.text()
        self.FoodShel.clicked.connect(lambda:self.FMlocation(dist))
        self.NightShel.clicked.connect(lambda:self.NMlocation(dist))
        self.GovtHosp.clicked.connect(lambda:self.GHMlocation(dist))
        self.StateLab.setText("State: %s"%state)
        self.StateLab.adjustSize()
        self.DistLab.setText("Dist: %s"%dist)
        self.DistLab.adjustSize()
        self.Vdata(state,dist)
    def FAlocation(self,lat,long):
        self.Browser.setUrl(QtCore.QUrl("http://google.com/maps/search/Food+Shelter+near+me/@%s,%s"%(str(lat),str(long))))
    def NAlocation(self,lat,long):
        self.Browser.setUrl(QtCore.QUrl("http://google.com/maps/search/Night+Shelter+near+me/@%s,%s"%(str(lat),str(long))))
    def GHAlocation(self,lat,long):
        self.Browser.setUrl(QtCore.QUrl("http://google.com/maps/search/Goverment+Hospitals+near+me/@%s,%s"%(str(lat),str(long))))
    def process(self):
        urlip="https://api.ipify.org/"
        ip=requests.get(urlip)
        ip=str(ip.content)
        ip=ip.replace('b','')
        ip=ip.replace("'","")
        urloc="https://tools.keycdn.com/geo.json?host=%s"%ip
        loca=requests.get(urloc)
        with open("temp/loc.json",'wb') as dat:
            dat.write(loca.content)
        dat.close()
        with open("temp/loc.json",'rb') as dat:
            loca=json.load(dat)
        lat=loca['data']['geo']['latitude']
        long=loca['data']['geo']['longitude']

        url = "https://location-to-address.p.rapidapi.com/v1/geocode/reverse"

        querystring = {"limit":"1","lang":"en","lat":lat,"lon":long}

        headers = {
            'x-rapidapi-host': "location-to-address.p.rapidapi.com",
            'x-rapidapi-key': "ce5bab4e2dmsh8cded617bab0689p1ae15ajsn30e7e8c1eee9"
            }

        response = requests.request("GET", url, headers=headers, params=querystring)
        with open("temp/loc.json",'wb') as dat:
            dat.write(response.content)
        dat.close()
        with open("temp/loc.json",'rb') as dat:
            loca=json.load(dat)

        state=loca['features'][0]['properties']['state']
        dist=loca['features'][0]['properties']['datasource']['state_district']
        self.FoodShel.clicked.connect(lambda:self.FAlocation(lat,long))
        self.NightShel.clicked.connect(lambda:self.NAlocation(lat,long))
        self.GovtHosp.clicked.connect(lambda:self.GHAlocation(lat,long))
        self.StateLab.setText("State: %s"%state)
        self.StateLab.adjustSize()
        self.DistLab.setText("Dist: %s"%dist)
        self.DistLab.adjustSize()
        self.Vdata(state,dist)
    def Vdata(self,state,dist):
        print(state)
        print(dist)
        sucess=0
        with open("temp/data.json",'wb') as f:
                url = "https://api.covidindiatracker.com/state_data.json"
                response = requests.get(url)
                f.write(response.content)
        f.close()
        response=response.content
        with open("temp/data.json",'rb') as f:
                data=json.load(f)
        for i in range(len(data)):
            sucess=0
            if state == (data[i]['state']) and state!='':
                self.SActiveLCD.display(78)
                self.SActiveLCD.display(data[i]['active'])
                self.SConfirmedLCD.display(data[i]['confirmed'])
                self.SRecoveredLCD.display(data[i]['recovered'])
                self.SDeathsLCD.display(data[i]['deaths'])
                sucess=1
                for j in range(len(data[i]['districtData'])):
                    if dist == (data[i]["districtData"][j]['name']) and dist!='' and sucess==1:
                        self.DConfirmedLCD.display(data[i]["districtData"][j]['confirmed'])
                        if data[i]["districtData"][j]['recovered'] ==None:
                            self.DRecoveredLCD.display("D.E")
                        else:
                            self.DRecoveredLCD.display(data[i]["districtData"][j]['recovered'])
                        if data[i]["districtData"][j]['deaths'] ==None:
                            self.DDeathsLCD.display("D.E")
                        else:
                            self.DDeathsLCD.display(data[i]["districtData"][j]['deaths'])
                        zone=data[i]["districtData"][j]['zone']
                        self.dist_active_2.setText(zone)
                        print(zone)
                        if zone=="GREEN":
                            self.ZoneColor.setPixmap(QtGui.QPixmap("Green.png"))
                        elif zone=="ORANGE":
                            self.ZoneColor.setPixmap(QtGui.QPixmap("Orange.png"))
                        elif zone=='RED':
                            self.ZoneColor.setPixmap(QtGui.QPixmap("Red.png"))
                        elif zone=="YELLOW":
                            self.ZoneColor.setPixmap(QtGui.QPixmap("Yellow.png"))
                        else:
                            self.ZoneColor.setPixmap(QtGui.QPixmap("Blue.png"))
                        break
                else:
                    self.DistLab.setText("Dist: Not Found")
                    self.DistLab.show()
                    self.DistLab.adjustSize()
                    self.DRecoveredLCD.display(0)
                    self.DConfirmedLCD.display(0)
                    self.DDeathsLCD.display(0)
                    self.dist_active_2.setText("N/A")
                    self.ZoneColor.setPixmap(QtGui.QPixmap("Blue.png"))
                    sucess=0
                break
        else:
            sucess=0
            self.StateLab.setText("State: Not Found")
            self.StateLab.adjustSize()
            self.SRecoveredLCD.display(0)
            self.SDeathsLCD.display(0)   
            self.SConfirmedLCD.display(0)   
            self.SActiveLCD.display(0)
            self.DistLab.setText("Dist: Not Found")
            self.DistLab.show()
            self.DistLab.adjustSize()
            self.DRecoveredLCD.display(0)
            self.DConfirmedLCD.display(0)
            self.DDeathsLCD.display(0)
            self.dist_active_2.setText("N/A")
            self.ZoneColor.setPixmap(QtGui.QPixmap("Blue.png"))

            
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
